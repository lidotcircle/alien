name: lua alien release
on:
  push:
    branches:
      - master
      - dev
    tags:
      - v[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  setup:
    if: "contains(github.event.head_commit.message, '*CI*') || startsWith(github.ref, 'refs/tags')"
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      release: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v2
      - name: version
        id: version
        run: printf "::set-output name=version::%s\n" "$(cat CMakeLists.txt | sed '/^.*CMAKE_PROJECT_VERSION/!d' | head -1 | sed 's/^[^0-9.]*//g;s/[)]//g')"
      - name: release
        id: release
        run: |
          branch=$(echo ${{github.ref}} | sed 's/refs\/\(heads\|tags\)\///g') && \
            release=$([[ "$branch" =~ v[0-9.]+ ]] && echo $branch || echo "$branch-${{ steps.version.outputs.version }}") && \
            printf "::set-output name=release::%s\n" "$release"

  linux_x64_release:
    needs: [ setup ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: setup lua and libffi
        run: sudo apt install liblua5.3-dev libffi-dev
      - name: build application
        run: mkdir build && pushd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make && cmake -E tar cf alien_linux_x64.tar.gz alien.lua alien_c.so
      - name: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "build/alien_linux_x64.tar.gz"
          tag: ${{ needs.setup.outputs.release }}
          token: ${{ secrets.GITHUB_TOKEN }}

  windows_release:
    needs: [ setup ]
    runs-on: windows-latest
    strategy:
      matrix:
        arch: ["amd64", "amd64_x86"]
    steps:
      - uses: actions/checkout@v2
      - name: platform variables
        id: vars
        run: >
          if ("${{ matrix.arch }}" -eq "amd64")
            { Write-Output "::set-output name=platform::x64" }
          else
            { Write-Output "::set-output name=platform::Win32" }
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - uses: lidotcircle/setup-lua@master
        with:
          lua-version: "5.3.5"
          platform: ${{ steps.vars.outputs.platform }}
      - name: archieve name
        id: archieve_name
        run: >
          if ("${{ matrix.arch }}" -eq "amd64")
          {
            Write-Output "::set-output name=zipname::alien_win64.zip"; 
            Write-Output "::set-output name=zipname_lua::alien_win64_lua.zip"; 
          }
          else
          { 
            Write-Output "::set-output name=zipname::alien_win32.zip";
            Write-Output "::set-output name=zipname_lua::alien_win32_lua.zip"; 
          }
      - name: build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" ..
          nmake
          cmake -E tar cf ${{ steps.archieve_name.outputs.zipname }} alien_c.dll alien.lua libffi.dll
          Copy-Item -Recurse ../.lua ./lua
          cmake -E tar cf ${{ steps.archieve_name.outputs.zipname_lua }} alien_c.dll alien.lua libffi.dll lua
      - name: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "build/${{ steps.archieve_name.outputs.zipname }},build/${{ steps.archieve_name.outputs.zipname_lua }}"
          tag: ${{ needs.setup.outputs.release }}
          token: ${{ secrets.GITHUB_TOKEN }}
